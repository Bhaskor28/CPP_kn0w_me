//BHaSKoR rOy
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
template<typename... T>
void see(T&... args) { ((cin >> args), ...);}
template<typename... T>
void put(T&&... args) { ((cout << args << " "), ...);}
template<typename... T>
void putl(T&&... args) { ((cout << args << " "), ...); cout<<'\n';}
#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {cerr << *it << "=" << a << ", "; err(++it, args...);}
#define int long long
#define pb push_back
#define pf push_front
#define F first
#define S second
#define ll long long
#define ull unsigned long long
#define ld long double
#define pii pair<int,int>
#define vi vector<int>
#define vpi vector<pii>
#define vc vector
#define L cout<<'\n';
#define E cerr<<'\n';
#define all(x) x.begin(),x.end()
#define forn(i,a,b) for (int i=a; i<b; ++i)
#define rfor(i,a,b) for (int i=a; i>b; --i)
#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
#define setpr(x) cout<<setprecision(x)<<fixed
#define sz size()
#define arin(a,x,y) for(int i=x;i<y;i++){cin>>a[i];}
#define vecin(v,n) for(int i=0;i<n;i++){int x; cin>>x; v.push_back(x);}
#define setin(s,n) for(int i=0;i<n;i++){int x; cin>>x; s.insert(x);}
#define ordered_set tree<int, null_type,less_equal<int>, rb_tree_tag,tree_order_statistics_node_update>
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define endl '\n'
#define pn(c, n) for (int i = 0; i < n; ++i) cout<<c[i]<<' '; cout<<'\n'

#define pnaz(c,st, n) for (int i = st; i < n; ++i) cout<<c[i]<<' '; cout<<'\n'

#define stpn(st) for (auto el:st ) cout<<el<<' '; cout<<'\n'
#define yes cout<<"YES"<<endl
#define no cout<<"NO"<<endl

#define pn2d(n,m,dp)     forn(i,0,n){ forn(j,0,m){cout<<dp[i][j]<<" "; }cout<<endl;}
using vll = vector<long long>;

int N=1e5+5;
vi segt(4*N);
vi a(N);
int infinity=INT_MAX;
int cal1(int node){

return segt[node]=max(segt[2*node],segt[2*node+1]);

}




void build(int node,int low,int high){

if(low==high){

    segt[node]=a[low];
    return ;
}

int mid=(low+high)/2;

build(2*node,low,mid);
build(2*node+1,mid+1,high);

cal1(node);


}
void update(int node,int left,int right,int x,int y){


int mid=(left+right)/2;

if(left==right){
    segt[node]=y;
    return ;
}
if(x<=mid){

    update(2*node,left,mid,x,y);

}
else{
    update(2*node+1,mid+1,right,x,y);
}

cal1(node);





}

int query(int node,int left,int right,int l,int r){


if(l<=left && right<=r){

    return segt[node];
}
else{

    int ans=-infinity;
    int mid=(left+right)/2;
    if(l<=mid){

        ans=max(ans,query(2*node,left,mid,l,r));

    }
    if(r>=mid+1){

        ans=max(ans,query(2*node+1,mid+1,right,l,r));

    }

    return ans;

}




}




void s2(){


int n;
cin>>n;

arin(a,1,n+1);
//
//for building the tree
build(1,1,n);
pn(a,n+1);
pn(segt,32);


//for update

int x,y;
cin>>x>>y;
update(1,1,n,x,y);

pn(segt,32);




//for query
int l,r;
cin>>l>>r;

cout<<query(1,1,n,l,r)<<endl;

// for query

}



signed main(){

int t=1;
cin>>t;
while(t--){


s2();
}

return 0;

}
